// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SeedingATree
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AnOrgStructureCanBeExpressedInGherkinFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "An org structure can be expressed in gherkin.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "An org structure can be expressed in gherkin", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "An org structure can be expressed in gherkin")))
            {
                SeedingATree.AnOrgStructureCanBeExpressedInGherkinFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Seed an org tree using a table with a row for each org unit and parent relation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "An org structure can be expressed in gherkin")]
        public virtual void SeedAnOrgTreeUsingATableWithARowForEachOrgUnitAndParentRelation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Seed an org tree using a table with a row for each org unit and parent relation", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent"});
            table1.AddRow(new string[] {
                        "Board",
                        ""});
            table1.AddRow(new string[] {
                        "HOFin",
                        "Board"});
            table1.AddRow(new string[] {
                        "FinContr",
                        "HOFin"});
            table1.AddRow(new string[] {
                        "FinStrat",
                        "HOFin"});
            table1.AddRow(new string[] {
                        "HOTech",
                        "Board"});
            table1.AddRow(new string[] {
                        "ITInfra",
                        "HOTech"});
            table1.AddRow(new string[] {
                        "SWDevSvc",
                        "HOTech"});
            table1.AddRow(new string[] {
                        "SWPmo",
                        "SWDevSvc"});
            table1.AddRow(new string[] {
                        "SWEng",
                        "SWDevSvc"});
#line 4
 testRunner.Given("I have the following org units", ((string)(null)), table1, "Given ");
#line 16
 testRunner.When("I execute the specs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("I get the correct org units.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Seed an org tree using a table with a row for each org unit and column skipping")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "An org structure can be expressed in gherkin")]
        public virtual void SeedAnOrgTreeUsingATableWithARowForEachOrgUnitAndColumnSkipping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Seed an org tree using a table with a row for each org unit and column skipping", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Level1",
                        "Level2",
                        "Level3",
                        "Level4"});
            table2.AddRow(new string[] {
                        "Board",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "HOFin",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "FinContr",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "FinStrat",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "HOTech",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "ITInfra",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "SWDevSvc",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "SWPmo"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "SWEng"});
#line 23
 testRunner.Given("I have the following levelled org structure", ((string)(null)), table2, "Given ");
#line 35
 testRunner.When("I execute the specs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("I get the correct org units.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Seed an org tree using a table with a row for each org unit and indentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "An org structure can be expressed in gherkin")]
        public virtual void SeedAnOrgTreeUsingATableWithARowForEachOrgUnitAndIndentation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Seed an org tree using a table with a row for each org unit and indentation", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Org unit at level"});
            table3.AddRow(new string[] {
                        "Board"});
            table3.AddRow(new string[] {
                        ". HOFin"});
            table3.AddRow(new string[] {
                        ". . FinContr"});
            table3.AddRow(new string[] {
                        ". . FinStrat"});
            table3.AddRow(new string[] {
                        ". HOTech"});
            table3.AddRow(new string[] {
                        ". . ITInfra"});
            table3.AddRow(new string[] {
                        ". . SWDevSvc"});
            table3.AddRow(new string[] {
                        ". . . SWPmo"});
            table3.AddRow(new string[] {
                        ". . . SWEng"});
#line 42
 testRunner.Given("I have the following intended org structure", ((string)(null)), table3, "Given ");
#line 54
 testRunner.When("I execute the specs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("I get the correct org units.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Seed an org tree using a multiline text with a row for each org unit and indentat" +
            "ion with dots")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "An org structure can be expressed in gherkin")]
        public virtual void SeedAnOrgTreeUsingAMultilineTextWithARowForEachOrgUnitAndIndentationWithDots()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Seed an org tree using a multiline text with a row for each org unit and indentat" +
                    "ion with dots", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 61
 testRunner.Given("I have the following intended org structure as text", "Board       \r\n. HOFin     \r\n. . FinContr\r\n. . FinStrat\r\n. HOTech    \r\n. . ITInfra" +
                    " \r\n. . SWDevSvc\r\n. . . SWPmo \r\n. . . SWEng ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.When("I execute the specs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.Then("I get the correct org units.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Seed an org tree using a multiline text with a row for each org unit and indentat" +
            "ion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "An org structure can be expressed in gherkin")]
        public virtual void SeedAnOrgTreeUsingAMultilineTextWithARowForEachOrgUnitAndIndentation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Seed an org tree using a multiline text with a row for each org unit and indentat" +
                    "ion", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 81
 testRunner.Given("I have the following intended org structure as text", "Board       \r\n  HOFin     \r\n    FinContr\r\n    FinStrat\r\n  HOTech    \r\n    ITInfra" +
                    " \r\n    SWDevSvc\r\n      SWPmo \r\n      SWEng ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
 testRunner.When("I execute the specs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("I get the correct org units.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Seed an org tree using a multiline text with a row for each org unit and indentat" +
            "ion with arrows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "An org structure can be expressed in gherkin")]
        public virtual void SeedAnOrgTreeUsingAMultilineTextWithARowForEachOrgUnitAndIndentationWithArrows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Seed an org tree using a multiline text with a row for each org unit and indentat" +
                    "ion with arrows", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 101
 testRunner.Given("I have the following intended org structure as text indenting by \'-> \'", "Board       \r\n-> HOFin     \r\n   -> FinContr\r\n   -> FinStrat\r\n-> HOTech    \r\n   ->" +
                    " ITInfra \r\n   -> SWDevSvc\r\n      -> SWPmo \r\n      -> SWEng ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.When("I execute the specs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.Then("I get the correct org units.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
