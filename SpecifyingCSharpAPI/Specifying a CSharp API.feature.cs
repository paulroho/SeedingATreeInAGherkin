// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecifyingCSharpAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class QueryingTheOrgStructureUsingTheAPIsProvidedByTheInfoManagerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Specifying a CSharp API.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Querying the Org structure using the APIs provided by the InfoManager", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Querying the Org structure using the APIs provided by the InfoManager")))
            {
                SpecifyingCSharpAPI.QueryingTheOrgStructureUsingTheAPIsProvidedByTheInfoManagerFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
 testRunner.Given("I have the following intended org structure as text indenting by \'-> \'", "Board       \r\n-> HOFin     \r\n-> HOTech    \r\n   -> ITInfra \r\n   -> SWDevSvc\r\n     " +
                    " -> SWPmo \r\n      -> SWEng ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Querying the direct children of an org unit using the method InfoManager.GetDirec" +
            "tChildren(OrgUnit orgUnit)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Querying the Org structure using the APIs provided by the InfoManager")]
        public virtual void QueryingTheDirectChildrenOfAnOrgUnitUsingTheMethodInfoManager_GetDirectChildrenOrgUnitOrgUnit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Querying the direct children of an org unit using the method InfoManager.GetDirec" +
                    "tChildren(OrgUnit orgUnit)", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 18
 testRunner.Given("for each org unit I have an OrgUnit object named orgUnit.Shortname", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("I call GetDirectChildren(HOTech)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Org Unit"});
            table1.AddRow(new string[] {
                        "ITInfra"});
            table1.AddRow(new string[] {
                        "SWDevSvc"});
#line 22
 testRunner.Then("I get the org units", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Querying the direct children of an org unit using the method InfoManager.GetDirec" +
            "tChildren(string orgUnitShortName)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Querying the Org structure using the APIs provided by the InfoManager")]
        public virtual void QueryingTheDirectChildrenOfAnOrgUnitUsingTheMethodInfoManager_GetDirectChildrenStringOrgUnitShortName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Querying the direct children of an org unit using the method InfoManager.GetDirec" +
                    "tChildren(string orgUnitShortName)", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 30
 testRunner.When("I call GetDirectChildren(\"HOTech\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Org Unit"});
            table2.AddRow(new string[] {
                        "ITInfra"});
            table2.AddRow(new string[] {
                        "SWDevSvc"});
#line 32
 testRunner.Then("I get the org units", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Querying all children of an org unit using the method InfoManager.GetAllChildren(" +
            "OrgUnit orgUnit)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Querying the Org structure using the APIs provided by the InfoManager")]
        public virtual void QueryingAllChildrenOfAnOrgUnitUsingTheMethodInfoManager_GetAllChildrenOrgUnitOrgUnit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Querying all children of an org unit using the method InfoManager.GetAllChildren(" +
                    "OrgUnit orgUnit)", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 40
 testRunner.Given("for each org unit I have an OrgUnit object named orgUnit.Shortname", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.When("I call GetAllChildren(HOTech)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Org Unit"});
            table3.AddRow(new string[] {
                        "ITInfra"});
            table3.AddRow(new string[] {
                        "SWDevSvc"});
            table3.AddRow(new string[] {
                        "SWPmo"});
            table3.AddRow(new string[] {
                        "SWEng"});
#line 44
 testRunner.Then("I get the org units", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Querying all children of an org unit using the method InfoManager.GetAllChildren(" +
            "OrgUnit orgUnit, bool includeSelf)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Querying the Org structure using the APIs provided by the InfoManager")]
        public virtual void QueryingAllChildrenOfAnOrgUnitUsingTheMethodInfoManager_GetAllChildrenOrgUnitOrgUnitBoolIncludeSelf()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Querying all children of an org unit using the method InfoManager.GetAllChildren(" +
                    "OrgUnit orgUnit, bool includeSelf)", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 54
 testRunner.Given("for each org unit I have an OrgUnit object named orgUnit.Shortname", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.When("I call GetAllChildren(HOTech, includeSelf:true)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Org Unit"});
            table4.AddRow(new string[] {
                        "HOTech"});
            table4.AddRow(new string[] {
                        "ITInfra"});
            table4.AddRow(new string[] {
                        "SWDevSvc"});
            table4.AddRow(new string[] {
                        "SWPmo"});
            table4.AddRow(new string[] {
                        "SWEng"});
#line 58
 testRunner.Then("I get the org units", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Querying all the children of an org unit using the method InfoManager.GetAllChild" +
            "ren(string orgUnitShortName)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Querying the Org structure using the APIs provided by the InfoManager")]
        public virtual void QueryingAllTheChildrenOfAnOrgUnitUsingTheMethodInfoManager_GetAllChildrenStringOrgUnitShortName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Querying all the children of an org unit using the method InfoManager.GetAllChild" +
                    "ren(string orgUnitShortName)", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 69
 testRunner.When("I call GetAllChildren(\"HOTech\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Org Unit"});
            table5.AddRow(new string[] {
                        "ITInfra"});
            table5.AddRow(new string[] {
                        "SWDevSvc"});
            table5.AddRow(new string[] {
                        "SWPmo"});
            table5.AddRow(new string[] {
                        "SWEng"});
#line 71
 testRunner.Then("I get the org units", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Querying all the children of an org unit using the method InfoManager.GetAllChild" +
            "ren(string orgUnitShortName, bool includeSelf)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Querying the Org structure using the APIs provided by the InfoManager")]
        public virtual void QueryingAllTheChildrenOfAnOrgUnitUsingTheMethodInfoManager_GetAllChildrenStringOrgUnitShortNameBoolIncludeSelf()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Querying all the children of an org unit using the method InfoManager.GetAllChild" +
                    "ren(string orgUnitShortName, bool includeSelf)", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 81
 testRunner.When("I call GetAllChildren(\"HOTech\", includeSelf:true)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Org Unit"});
            table6.AddRow(new string[] {
                        "HOTech"});
            table6.AddRow(new string[] {
                        "ITInfra"});
            table6.AddRow(new string[] {
                        "SWDevSvc"});
            table6.AddRow(new string[] {
                        "SWPmo"});
            table6.AddRow(new string[] {
                        "SWEng"});
#line 83
 testRunner.Then("I get the org units", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
