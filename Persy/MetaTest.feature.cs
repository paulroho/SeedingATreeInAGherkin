// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Persy
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ThePermissionChainStepsDoWhatTheyAreSupposedToDoFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MetaTest.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "The permission chain steps do what they are supposed to do", "\tIn order to avoid maintain the correct functionality of the step bindings for pe" +
                    "rmission chains\r\n\tAs a PERSY-developer\r\n\tI want to be sure that each step bindin" +
                    "gs does exactly what it is supposed to do.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "The permission chain steps do what they are supposed to do")))
            {
                Persy.ThePermissionChainStepsDoWhatTheyAreSupposedToDoFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Permission chain: group is inactive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "The permission chain steps do what they are supposed to do")]
        public virtual void PermissionChainGroupIsInactive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Permission chain: group is inactive", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("there is a permission chain \'Ben1 (MyDomain\\Ben1) --- Grp1 (INACTIVE) --- Pos1 - " +
                    "ad.group1\'.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.When("I execute the SpecFlow-specs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Name",
                        "Active-State"});
            table1.AddRow(new string[] {
                        "User",
                        "Ben1",
                        "active"});
            table1.AddRow(new string[] {
                        "Group",
                        "Grp1",
                        "inactive"});
            table1.AddRow(new string[] {
                        "Position",
                        "Pos1",
                        "active"});
            table1.AddRow(new string[] {
                        "AD-Group",
                        "ad.group1",
                        "active"});
#line 13
 testRunner.Then("the following objects of hard entities are available:", ((string)(null)), table1, "Then ");
#line 19
 testRunner.And("the AD-group \'ad.group1\' is assigned to the position \'Pos1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Object1",
                        "Object2",
                        "Active-State"});
            table2.AddRow(new string[] {
                        "UserToGroup",
                        "Ben1",
                        "Grp1",
                        "active"});
            table2.AddRow(new string[] {
                        "GroupToPosition",
                        "Grp1",
                        "Pos1",
                        "active"});
#line 20
 testRunner.And("the following objects of weak entities are available:", ((string)(null)), table2, "And ");
#line 25
 testRunner.And("in the AD there is an AD-user \'MyDomain\\Ben1\' and the AD-group \'ad.group1\'.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
